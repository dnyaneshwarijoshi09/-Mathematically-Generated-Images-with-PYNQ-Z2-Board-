# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XpItOZl0JPlsqJb573RHrKpoiTybflRN
"""

import colorsys
import math
from PIL import Image as IM, ImageDraw
from IPython.display import display
from ipywidgets import widgets, interact

# Direct sine/cosine (replace FPGA CORDIC calls)
def sinPL(angle):
    return math.sin(angle)

def cosPL(angle):
    return math.cos(angle)

# Recursive function to draw tree
def drawTreePL(d, x1, y1, angle, depth, maxd, spread, length):
    if depth > 0:
        angleRad = math.radians(angle)

        # Adjust angle into valid range
        if angleRad < -(2*math.pi):
            angleRad += 2*math.pi
        elif angleRad > (2*math.pi):
            angleRad -= 2*math.pi

        if angleRad < -math.pi:
            cosAngle = cosPL(2*math.pi - abs(angleRad))
            sinAngle = sinPL((-angleRad) - math.pi)
        elif angleRad > math.pi:
            cosAngle = cosPL(2*math.pi - abs(angleRad))
            sinAngle = sinPL(math.pi - abs(angleRad))
        else:
            cosAngle = cosPL(angleRad)
            sinAngle = sinPL(angleRad)

        x2 = x1 + cosAngle * depth * length
        y2 = y1 + sinAngle * depth * length

        # Color by depth
        r, g, b = colorsys.hsv_to_rgb(float(depth) / maxd, 1.0, 1.0)
        R, G, B = int(255 * r), int(255 * g), int(255 * b)

        # Draw branch
        d.line([x1, y1, x2, y2], (R, G, B), depth)

        # Recursively draw sub-branches
        drawTreePL(d, x2, y2, angle - spread, depth - 1, maxd, spread, length)
        drawTreePL(d, x2, y2, angle + spread, depth - 1, maxd, spread, length)

# Update and display fractal
def updatePL(Depth, Spread):
    width = 600
    height = 480
    img = IM.new('RGB', (width, height), (0, 0, 0))
    d = ImageDraw.Draw(img)
    drawTreePL(d, width/2, height*0.9, -90, Depth, Depth, Spread, 7)
    display(img)

# Interactive sliders
maxDepth = widgets.IntSlider(min=1, max=10, step=1, value=8)
spread = widgets.IntSlider(min=0, max=45, step=1, value=15)
interact(updatePL, Depth=maxDepth, Spread=spread)