# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hQBS2JCC8YoC1gT7J44uYMcylRyx5p5E
"""

# 1. Install ipywidgets (needed for sliders in Colab)
!pip install ipywidgets
from google.colab import output
output.enable_custom_widget_manager()

# 2. Imports
import colorsys
from math import radians, cos, sin
from PIL import Image as IM, ImageDraw
from IPython.display import display
from ipywidgets import widgets, interact

# 3. Recursive tree drawing
def generate_tree(x_start, y_start, angle_deg, depth, depth_max, branch_angle, branch_length):
    if depth <= 0:
        return

    x_end = x_start + cos(radians(angle_deg)) * branch_length * depth
    y_end = y_start + sin(radians(angle_deg)) * branch_length * depth

    hue_val = float(depth) / depth_max
    r, g, b = colorsys.hsv_to_rgb(hue_val, 1.0, 1.0)
    R, G, B = int(r * 255), int(g * 255), int(b * 255)

    canvas.line([x_start, y_start, x_end, y_end], (R, G, B), width=max(1, depth))

    generate_tree(x_end, y_end, angle_deg - branch_angle, depth - 1, depth_max, branch_angle, branch_length)
    generate_tree(x_end, y_end, angle_deg + branch_angle, depth - 1, depth_max, branch_angle, branch_length)

# 4. Refresh function
def refresh_tree(depth_val, spread_val):
    branch_len = 7
    canvas.rectangle((0, 0, img_width, img_height), fill=(0, 0, 0))  # fixed coordinates
    generate_tree(img_width / 2, img_height * 0.9, -90, depth_val, depth_val, spread_val, branch_len)
    img.save("fractal_tree.png", "PNG")
    display(IM.open("fractal_tree.png"))

# 5. Setup canvas
img_width, img_height = 600, 480
img = IM.new("RGB", (img_width, img_height))
canvas = ImageDraw.Draw(img)

# 6. Interactive sliders in Colab
depth_slider = widgets.IntSlider(min=1, max=10, step=1, value=8, description="Depth")
spread_slider = widgets.IntSlider(min=0, max=45, step=1, value=15, description="Spread")
interact(refresh_tree, depth_val=depth_slider, spread_val=spread_slider)